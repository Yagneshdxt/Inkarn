@model DataAccess.spa_VM
@{
    ViewBag.Title = "Edit";
}
<h2>Edit</h2>

<div class="container">
    @using (Html.BeginForm("Edit", "spa", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.AntiForgeryToken()
        <div class="form-horizontal">
            <h4>Add Category</h4>
            <hr />
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.name, "Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.basic_info.name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.basic_info.name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.cityId, "City", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownListFor(x => x.basic_info.cityId, (SelectList)ViewBag.citylst, "Select city", new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.basic_info.cityId, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.address, "Address", htmlAttributes: new { @class = "control-label col-md-2", placeholder = "Enter your address" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.basic_info.address, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.basic_info.address, "", new { @class = "text-danger" })
                </div>
                @*<input type="text" id="street_number" />
                <input type="text" id="route" />
                <input type="text" id="locality" />
                <input type="text" id="administrative_area_level_1" />
                <input type="text" id="country" />
                <input type="text" id="postal_code"/>*@
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.zipcode, "ZipCode", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.basic_info.zipcode, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.basic_info.zipcode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.info_about, "About", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(x => x.basic_info.info_about, 10, 10, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.basic_info.info_about, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.contact_name, "Contact Name", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.basic_info.contact_name, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.basic_info.contact_name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.contact_email, "Contact Email", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.basic_info.contact_email, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.basic_info.contact_email, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.contact_no, "Contact Number", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.basic_info.contact_no, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.basic_info.contact_no, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.categoryLst, "Category List", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <ul class="list-inline" id="categoryList">
                        @for (int i = 0; i < Model.categoryLst.Count(); i++)
                        {
                        <li class="list-inline-item">
                            <label class="checkbox-inline">
                                @Html.HiddenFor(x => x.categoryLst[i].Id)
                                @Html.CheckBoxFor(x => x.categoryLst[i].isChecked)
                                @Html.LabelFor(a => Model.categoryLst[i].name, Model.categoryLst[i].name)
                            </label>
                        </li>
                        }
                    </ul>
                    @Html.ValidationMessageFor(model => model.categoryLst, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Price List", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10" id="divCatPrice">
                    @{ Html.RenderPartial("subcatePrice", Model); }
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Browse file", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-5">
                    <input type="file" multiple id="browseImages" name="spaImageFiles" class="form-control" />

                    <ul class="list-group">
                        @for (int i = 0; i < Model.images.Count; i++)
                        {
                        <li class="list-group-item">
                            <a class="title" href="/spa/Download/?p=@Model.images[i].image_url&d=file_@i.ToString()"> file_@i.ToString() </a>
                            <a href="javascript:void(0);" data-id="@Model.images[i].id" class="deleteItem pull-right">X</a>
                        </li>
                        }
                    </ul>
                </div>
            </div>
            <div class="form-group">
                @Html.Label("Timings", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @for (int i = 0; i < Model.timings.Count; i++)
                    {
                    <div class="row">
                        <div class="col-md-4">
                            @Html.Label(Model.timings[i].week_day, new { @class = "control-label col-md-2" })
                            @Html.HiddenFor(x => x.timings[i].week_day)
                        </div>
                        <div class="col-md-8">
                            @Html.TextBoxFor(x => x.timings[i].frm_to_times, new { @class = "form-control" })
                        </div>
                    </div>
                    }
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(model => model.basic_info.contact_no, "is Active", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(x => x.basic_info.is_active)
                    @Html.ValidationMessageFor(model => model.basic_info.is_active, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-12">
                    <button type="submit" class="btn btn-default"> Update </button>
                </div>
            </div>
            @Html.HiddenFor(x => x.basic_info.id)
            <div>
                @Html.ActionLink("Back to List", "Index")
            </div>
            @ViewBag.sqlQuery
        </div>
                        }
</div>
@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            //Get sub category
            $("#categoryList input[type='checkbox']").change(function () {
                var seleCate = $("#categoryList input[type='checkbox']:checked").map(function () {
                    return $(this).closest("label.checkbox-inline").find("input[type='hidden'][id$='__Id']").val()
                }).get();
                if (seleCate.length <= 0) {
                    $("#divCatPrice").html('');
                    return;
                }
                $.post('@Url.Action("GetSubCategory")', { 'cat_id': seleCate, 'spa_id': parseInt($("#basic_info_id").val()) }, function (result) {
                    $("#divCatPrice").html(result);
                });

            });

            //delete file
            $('.deleteItem').click(function (e) {
                e.preventDefault();
                var $ctrl = $(this);
                if (confirm('Do you really want to delete this file?')) {
                    $.ajax({
                        url: '@Url.Action("DeleteFile")',
                        type: 'POST',
                        data: { id: $(this).data('id') }
                    }).done(function (data) {
                        if (data.Result == "OK") {
                            $ctrl.closest('li').remove();
                        }
                        else if (data.Message) {
                            alert(data.Message);
                        }
                    }).fail(function () {
                        alert("There is something wrong. Please try again.");
                    })

                }
            });
        })
        // Bias the autocomplete object to the user's geographical location,
        // as supplied by the browser's 'navigator.geolocation' object.
        /*function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    var geolocation = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };
                    var circle = new google.maps.Circle({
                        center: geolocation,
                        radius: position.coords.accuracy
                    });
                    autocomplete.setBounds(circle.getBounds());
                });
            }
        }*/
        var placeSearch, autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        };

        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** @@type {!HTMLInputElement} */(document.getElementById('basic_info_address')),
                { types: ['geocode'] });

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();
            console.log(place);
            for (var component in componentForm) {
                document.getElementById(componentForm[component]).value = '';
                document.getElementById(componentForm[component]).disabled = false;
            }

            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(componentForm[addressType]).value = val;
                }
            }
        }
    </script>
    @*<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCJIXNIZ_V67NBD98AB-VU5x5mBGAbREHY&libraries=places&callback=initAutocomplete" async defer></script>*@
}
